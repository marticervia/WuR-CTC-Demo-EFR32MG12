// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_ZCL_DEVICE_H
#define SILABS_ZCL_DEVICE_H


// This file contains the useful definitions for the use of ZCL configured device.
#include PLATFORM_HEADER
#include CONFIGURATION_HEADER
#include EMBER_AF_API_ZCL_CORE

// Cluster ids.
enum {
  EMBER_ZCL_CLUSTER_BASIC         = 0x0000,
  EMBER_ZCL_CLUSTER_IDENTIFY      = 0x0003,
  EMBER_ZCL_CLUSTER_GROUPS        = 0x0004,
  EMBER_ZCL_CLUSTER_SCENES        = 0x0005,
  EMBER_ZCL_CLUSTER_ON_OFF        = 0x0006,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL = 0x0008,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD  = 0x2000,
};

// -----------------------------------------------------------------------------
// Basic cluster (0x0000).

// Basic cluster client (0x0000).
extern const EmberZclClusterSpec_t emberZclClusterBasicClientSpec;

// Basic cluster client (0x0000) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_BASIC_CLIENT_ATTRIBUTE_BASIC_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
  EMBER_ZCL_CLUSTER_BASIC_CLIENT_ATTRIBUTE_BASIC_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// Basic cluster server (0x0000).
extern const EmberZclClusterSpec_t emberZclClusterBasicServerSpec;

// Basic cluster server (0x0000) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_VERSION                               = 0x0000,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_APPLICATION_VERSION                   = 0x0001,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_STACK_VERSION                         = 0x0002,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_HW_VERSION                            = 0x0003,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_MANUFACTURER_NAME                     = 0x0004,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_MODEL_IDENTIFIER                      = 0x0005,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_DATE_CODE                             = 0x0006,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_POWER_SOURCE                          = 0x0007,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_GENERIC_DEVICE_CLASS                  = 0x0008,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_GENERIC_DEVICE_TYPE                   = 0x0009,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_PRODUCT_CODE                          = 0x000A,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_PRODUCT_URL                           = 0x000B,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_LOCATION_DESCRIPTION                  = 0x0010,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_PHYSICAL_ENVIRONMENT                  = 0x0011,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_DEVICE_ENABLED                        = 0x0012,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_ALARM_MASK                            = 0x0013,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_DISABLE_LOCAL_CONFIG                  = 0x0014,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_SW_BUILD_ID                           = 0x4000,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_BASIC_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
  EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_BASIC_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// Basic cluster server (0x0000) - command ids.
enum {
  EMBER_ZCL_CLUSTER_BASIC_SERVER_COMMAND_RESET_TO_FACTORY_DEFAULTS = 0x00,
};

// Basic cluster server (0x0000) - ResetToFactoryDefaults (0x00) command.
typedef struct {
  bool dummy;
} EmberZclClusterBasicServerCommandResetToFactoryDefaultsRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterBasicServerCommandResetToFactoryDefaultsResponse_t;
EmberStatus emberZclSendClusterBasicServerCommandResetToFactoryDefaultsResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterBasicServerCommandResetToFactoryDefaultsResponse_t *response);

// -----------------------------------------------------------------------------
// Identify cluster (0x0003).

// Identify cluster client (0x0003).
extern const EmberZclClusterSpec_t emberZclClusterIdentifyClientSpec;

// Identify cluster client (0x0003) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_IDENTIFY_CLIENT_ATTRIBUTE_IDENTIFY_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
  EMBER_ZCL_CLUSTER_IDENTIFY_CLIENT_ATTRIBUTE_IDENTIFY_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// Identify cluster server (0x0003).
extern const EmberZclClusterSpec_t emberZclClusterIdentifyServerSpec;

// Identify cluster server (0x0003) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_TIME                            = 0x0000,
  EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_COMMISSION_STATE                         = 0x0001,
  EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
  EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// Identify cluster server (0x0003) - command ids.
enum {
  EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_IDENTIFY                = 0x00,
  EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_IDENTIFY_QUERY          = 0x01,
  EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_E_Z_MODE_INVOKE         = 0x02,
  EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_UPDATE_COMMISSION_STATE = 0x03,
  EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_TRIGGER_EFFECT          = 0x40,
};

// Identify cluster server (0x0003) - Identify (0x00) command.
typedef struct {
  int16u identifyTime;
} EmberZclClusterIdentifyServerCommandIdentifyRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterIdentifyServerCommandIdentifyResponse_t;
EmberStatus emberZclSendClusterIdentifyServerCommandIdentifyResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandIdentifyResponse_t *response);

// Identify cluster server (0x0003) - IdentifyQuery (0x01) command.
typedef struct {
  bool dummy;
} EmberZclClusterIdentifyServerCommandIdentifyQueryRequest_t;
typedef struct {
  int16u timeout;
} EmberZclClusterIdentifyServerCommandIdentifyQueryResponse_t;
EmberStatus emberZclSendClusterIdentifyServerCommandIdentifyQueryResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandIdentifyQueryResponse_t *response);

// Identify cluster server (0x0003) - EZModeInvoke (0x02) command.
typedef struct {
  int8u action;
} EmberZclClusterIdentifyServerCommandEZModeInvokeRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterIdentifyServerCommandEZModeInvokeResponse_t;
EmberStatus emberZclSendClusterIdentifyServerCommandEZModeInvokeResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandEZModeInvokeResponse_t *response);

// Identify cluster server (0x0003) - UpdateCommissionState (0x03) command.
typedef struct {
  int8u action;
  int8u commissionStateMask;
} EmberZclClusterIdentifyServerCommandUpdateCommissionStateRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterIdentifyServerCommandUpdateCommissionStateResponse_t;
EmberStatus emberZclSendClusterIdentifyServerCommandUpdateCommissionStateResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandUpdateCommissionStateResponse_t *response);

// Identify cluster server (0x0003) - TriggerEffect (0x40) command.
typedef struct {
  int8u effectId;
  int8u effectVariant;
} EmberZclClusterIdentifyServerCommandTriggerEffectRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterIdentifyServerCommandTriggerEffectResponse_t;
EmberStatus emberZclSendClusterIdentifyServerCommandTriggerEffectResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterIdentifyServerCommandTriggerEffectResponse_t *response);

// -----------------------------------------------------------------------------
// Groups cluster (0x0004).

// Groups cluster client (0x0004).
extern const EmberZclClusterSpec_t emberZclClusterGroupsClientSpec;

// Groups cluster client (0x0004) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_GROUPS_CLIENT_ATTRIBUTE_GROUPS_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
  EMBER_ZCL_CLUSTER_GROUPS_CLIENT_ATTRIBUTE_GROUPS_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// Groups cluster server (0x0004).
extern const EmberZclClusterSpec_t emberZclClusterGroupsServerSpec;

// Groups cluster server (0x0004) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_GROUPS_SERVER_ATTRIBUTE_GROUP_NAME_SUPPORT                     = 0x0000,
  EMBER_ZCL_CLUSTER_GROUPS_SERVER_ATTRIBUTE_GROUPS_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
  EMBER_ZCL_CLUSTER_GROUPS_SERVER_ATTRIBUTE_GROUPS_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// Groups cluster server (0x0004) - command ids.
enum {
  EMBER_ZCL_CLUSTER_GROUPS_SERVER_COMMAND_ADD_GROUP                = 0x00,
  EMBER_ZCL_CLUSTER_GROUPS_SERVER_COMMAND_VIEW_GROUP               = 0x01,
  EMBER_ZCL_CLUSTER_GROUPS_SERVER_COMMAND_GET_GROUP_MEMBERSHIP     = 0x02,
  EMBER_ZCL_CLUSTER_GROUPS_SERVER_COMMAND_REMOVE_GROUP             = 0x03,
  EMBER_ZCL_CLUSTER_GROUPS_SERVER_COMMAND_REMOVE_ALL_GROUPS        = 0x04,
  EMBER_ZCL_CLUSTER_GROUPS_SERVER_COMMAND_ADD_GROUP_IF_IDENTIFYING = 0x05,
};

// Groups cluster server (0x0004) - AddGroup (0x00) command.
typedef struct {
  int16u groupId;
  EmberZclStringType_t groupName;
  int8u addrAssignmentMode;
  EmberZclStringType_t groupMcastAddress;
  int16u groupUdpPort;
} EmberZclClusterGroupsServerCommandAddGroupRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
} EmberZclClusterGroupsServerCommandAddGroupResponse_t;
EmberStatus emberZclSendClusterGroupsServerCommandAddGroupResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterGroupsServerCommandAddGroupResponse_t *response);

// Groups cluster server (0x0004) - ViewGroup (0x01) command.
typedef struct {
  int16u groupId;
} EmberZclClusterGroupsServerCommandViewGroupRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
  EmberZclStringType_t groupName;
  int8u addrAssignmentMode;
  EmberZclStringType_t groupMcastAddress;
  int16u groupUdpPort;
} EmberZclClusterGroupsServerCommandViewGroupResponse_t;
EmberStatus emberZclSendClusterGroupsServerCommandViewGroupResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterGroupsServerCommandViewGroupResponse_t *response);

// Groups cluster server (0x0004) - GetGroupMembership (0x02) command.
typedef struct {
  CborArray groupList;
} EmberZclClusterGroupsServerCommandGetGroupMembershipRequest_t;
typedef struct {
  int8u capacity;
  CborArray groupList;
} EmberZclClusterGroupsServerCommandGetGroupMembershipResponse_t;
EmberStatus emberZclSendClusterGroupsServerCommandGetGroupMembershipResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterGroupsServerCommandGetGroupMembershipResponse_t *response);

// Groups cluster server (0x0004) - RemoveGroup (0x03) command.
typedef struct {
  int16u groupId;
} EmberZclClusterGroupsServerCommandRemoveGroupRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
} EmberZclClusterGroupsServerCommandRemoveGroupResponse_t;
EmberStatus emberZclSendClusterGroupsServerCommandRemoveGroupResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterGroupsServerCommandRemoveGroupResponse_t *response);

// Groups cluster server (0x0004) - RemoveAllGroups (0x04) command.
typedef struct {
  bool dummy;
} EmberZclClusterGroupsServerCommandRemoveAllGroupsRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterGroupsServerCommandRemoveAllGroupsResponse_t;
EmberStatus emberZclSendClusterGroupsServerCommandRemoveAllGroupsResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterGroupsServerCommandRemoveAllGroupsResponse_t *response);

// Groups cluster server (0x0004) - AddGroupIfIdentifying (0x05) command.
typedef struct {
  int16u groupId;
  EmberZclStringType_t groupName;
  int8u addrAssignmentMode;
  EmberZclStringType_t groupMcastAddress;
  int16u groupUdpPort;
} EmberZclClusterGroupsServerCommandAddGroupIfIdentifyingRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterGroupsServerCommandAddGroupIfIdentifyingResponse_t;
EmberStatus emberZclSendClusterGroupsServerCommandAddGroupIfIdentifyingResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterGroupsServerCommandAddGroupIfIdentifyingResponse_t *response);

// -----------------------------------------------------------------------------
// Scenes cluster (0x0005).

// Scenes cluster client (0x0005).
extern const EmberZclClusterSpec_t emberZclClusterScenesClientSpec;

// Scenes cluster client (0x0005) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_SCENES_CLIENT_ATTRIBUTE_SCENES_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
  EMBER_ZCL_CLUSTER_SCENES_CLIENT_ATTRIBUTE_SCENES_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// Scenes cluster server (0x0005).
extern const EmberZclClusterSpec_t emberZclClusterScenesServerSpec;

// Scenes cluster server (0x0005) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENE_COUNT                            = 0x0000,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_CURRENT_SCENE                          = 0x0001,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_CURRENT_GROUP                          = 0x0002,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENE_VALID                            = 0x0003,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENE_NAME_SUPPORT                     = 0x0004,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_LAST_CONFIGURED_BY                     = 0x0005,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENES_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENES_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// Scenes cluster server (0x0005) - command ids.
enum {
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_ADD_SCENE            = 0x00,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_VIEW_SCENE           = 0x01,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_REMOVE_SCENE         = 0x02,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_REMOVE_ALL_SCENES    = 0x03,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_STORE_SCENE          = 0x04,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_RECALL_SCENE         = 0x05,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_GET_SCENE_MEMBERSHIP = 0x06,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_ENHANCED_ADD_SCENE   = 0x40,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_ENHANCED_VIEW_SCENE  = 0x41,
  EMBER_ZCL_CLUSTER_SCENES_SERVER_COMMAND_COPY_SCENE           = 0x42,
};

// Scenes cluster server (0x0005) - AddScene (0x00) command.
typedef struct {
  int16u groupId;
  int8u sceneId;
  int16u transitionTime;
  EmberZclStringType_t sceneName;
  EmberZclStringType_t extensionFieldSets;
} EmberZclClusterScenesServerCommandAddSceneRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
  int8u sceneId;
} EmberZclClusterScenesServerCommandAddSceneResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandAddSceneResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandAddSceneResponse_t *response);

// Scenes cluster server (0x0005) - ViewScene (0x01) command.
typedef struct {
  int16u groupId;
  int8u sceneId;
} EmberZclClusterScenesServerCommandViewSceneRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
  int8u sceneId;
  int16u transitionTime;
  EmberZclStringType_t sceneName;
  EmberZclStringType_t extensionFieldSets;
} EmberZclClusterScenesServerCommandViewSceneResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandViewSceneResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandViewSceneResponse_t *response);

// Scenes cluster server (0x0005) - RemoveScene (0x02) command.
typedef struct {
  int16u groupId;
  int8u sceneId;
} EmberZclClusterScenesServerCommandRemoveSceneRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
  int8u sceneId;
} EmberZclClusterScenesServerCommandRemoveSceneResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandRemoveSceneResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandRemoveSceneResponse_t *response);

// Scenes cluster server (0x0005) - RemoveAllScenes (0x03) command.
typedef struct {
  int16u groupId;
} EmberZclClusterScenesServerCommandRemoveAllScenesRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
} EmberZclClusterScenesServerCommandRemoveAllScenesResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandRemoveAllScenesResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandRemoveAllScenesResponse_t *response);

// Scenes cluster server (0x0005) - StoreScene (0x04) command.
typedef struct {
  int16u groupId;
  int8u sceneId;
} EmberZclClusterScenesServerCommandStoreSceneRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
  int8u sceneId;
} EmberZclClusterScenesServerCommandStoreSceneResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandStoreSceneResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandStoreSceneResponse_t *response);

// Scenes cluster server (0x0005) - RecallScene (0x05) command.
typedef struct {
  int16u groupId;
  int8u sceneId;
  int16u transitionTime;
} EmberZclClusterScenesServerCommandRecallSceneRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterScenesServerCommandRecallSceneResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandRecallSceneResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandRecallSceneResponse_t *response);

// Scenes cluster server (0x0005) - GetSceneMembership (0x06) command.
typedef struct {
  int16u groupId;
} EmberZclClusterScenesServerCommandGetSceneMembershipRequest_t;
typedef struct {
  int8u status;
  int8u capacity;
  int16u groupId;
  CborArray sceneList;
} EmberZclClusterScenesServerCommandGetSceneMembershipResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandGetSceneMembershipResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandGetSceneMembershipResponse_t *response);

// Scenes cluster server (0x0005) - EnhancedAddScene (0x40) command.
typedef struct {
  int16u groupId;
  int8u sceneId;
  int16u transitionTime;
  EmberZclStringType_t sceneName;
  EmberZclStringType_t extensionFieldSets;
} EmberZclClusterScenesServerCommandEnhancedAddSceneRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
  int8u sceneId;
} EmberZclClusterScenesServerCommandEnhancedAddSceneResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandEnhancedAddSceneResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandEnhancedAddSceneResponse_t *response);

// Scenes cluster server (0x0005) - EnhancedViewScene (0x41) command.
typedef struct {
  int16u groupId;
  int8u sceneId;
} EmberZclClusterScenesServerCommandEnhancedViewSceneRequest_t;
typedef struct {
  int8u status;
  int16u groupId;
  int8u sceneId;
  int16u transitionTime;
  EmberZclStringType_t sceneName;
  EmberZclStringType_t extensionFieldSets;
} EmberZclClusterScenesServerCommandEnhancedViewSceneResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandEnhancedViewSceneResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandEnhancedViewSceneResponse_t *response);

// Scenes cluster server (0x0005) - CopyScene (0x42) command.
typedef struct {
  int8u mode;
  int16u groupIdFrom;
  int8u sceneIdFrom;
  int16u groupIdTo;
  int8u sceneIdTo;
} EmberZclClusterScenesServerCommandCopySceneRequest_t;
typedef struct {
  int8u status;
  int16u groupIdFrom;
  int8u sceneIdFrom;
} EmberZclClusterScenesServerCommandCopySceneResponse_t;
EmberStatus emberZclSendClusterScenesServerCommandCopySceneResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterScenesServerCommandCopySceneResponse_t *response);

// -----------------------------------------------------------------------------
// On/off cluster (0x0006).

// On/off cluster client (0x0006).
extern const EmberZclClusterSpec_t emberZclClusterOnOffClientSpec;

// On/off cluster client (0x0006) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_ON_OFF_CLIENT_ATTRIBUTE_ON_OFF_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
  EMBER_ZCL_CLUSTER_ON_OFF_CLIENT_ATTRIBUTE_ON_OFF_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// On/off cluster server (0x0006).
extern const EmberZclClusterSpec_t emberZclClusterOnOffServerSpec;

// On/off cluster server (0x0006) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF                                 = 0x0000,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_GLOBAL_SCENE_CONTROL                   = 0x4000,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_TIME                                = 0x4001,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_OFF_WAIT_TIME                          = 0x4002,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_START_UP_ON_OFF                        = 0x4003,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// On/off cluster server (0x0006) - command ids.
enum {
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_OFF                         = 0x00,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_ON                          = 0x01,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_TOGGLE                      = 0x02,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_OFF_WITH_EFFECT             = 0x40,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_ON_WITH_RECALL_GLOBAL_SCENE = 0x41,
  EMBER_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_ON_WITH_TIMED_OFF           = 0x42,
};

// On/off cluster server (0x0006) - Off (0x00) command.
typedef struct {
  bool dummy;
} EmberZclClusterOnOffServerCommandOffRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterOnOffServerCommandOffResponse_t;
EmberStatus emberZclSendClusterOnOffServerCommandOffResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOffResponse_t *response);

// On/off cluster server (0x0006) - On (0x01) command.
typedef struct {
  bool dummy;
} EmberZclClusterOnOffServerCommandOnRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterOnOffServerCommandOnResponse_t;
EmberStatus emberZclSendClusterOnOffServerCommandOnResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOnResponse_t *response);

// On/off cluster server (0x0006) - Toggle (0x02) command.
typedef struct {
  bool dummy;
} EmberZclClusterOnOffServerCommandToggleRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterOnOffServerCommandToggleResponse_t;
EmberStatus emberZclSendClusterOnOffServerCommandToggleResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandToggleResponse_t *response);

// On/off cluster server (0x0006) - OffWithEffect (0x40) command.
typedef struct {
  int8u effectId;
  int8u effectVariant;
} EmberZclClusterOnOffServerCommandOffWithEffectRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterOnOffServerCommandOffWithEffectResponse_t;
EmberStatus emberZclSendClusterOnOffServerCommandOffWithEffectResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOffWithEffectResponse_t *response);

// On/off cluster server (0x0006) - OnWithRecallGlobalScene (0x41) command.
typedef struct {
  bool dummy;
} EmberZclClusterOnOffServerCommandOnWithRecallGlobalSceneRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterOnOffServerCommandOnWithRecallGlobalSceneResponse_t;
EmberStatus emberZclSendClusterOnOffServerCommandOnWithRecallGlobalSceneResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOnWithRecallGlobalSceneResponse_t *response);

// On/off cluster server (0x0006) - OnWithTimedOff (0x42) command.
typedef struct {
  int8u onOffControl;
  int16u onTime;
  int16u offWaitTime;
} EmberZclClusterOnOffServerCommandOnWithTimedOffRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterOnOffServerCommandOnWithTimedOffResponse_t;
EmberStatus emberZclSendClusterOnOffServerCommandOnWithTimedOffResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOnOffServerCommandOnWithTimedOffResponse_t *response);

// -----------------------------------------------------------------------------
// Level Control cluster (0x0008).

// Level Control cluster client (0x0008).
extern const EmberZclClusterSpec_t emberZclClusterLevelControlClientSpec;

// Level Control cluster client (0x0008) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_CLIENT_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_CLIENT_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// Level Control cluster server (0x0008).
extern const EmberZclClusterSpec_t emberZclClusterLevelControlServerSpec;

// Level Control cluster server (0x0008) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_CURRENT_LEVEL                                 = 0x0000,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_LEVEL_CONTROL_REMAINING_TIME                  = 0x0001,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_OPTIONS                                       = 0x000F,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_ON_OFF_TRANSITION_TIME                        = 0x0010,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_ON_LEVEL                                      = 0x0011,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_ON_TRANSITION_TIME                            = 0x0012,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_OFF_TRANSITION_TIME                           = 0x0013,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_DEFAULT_MOVE_RATE                             = 0x0014,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_START_UP_CURRENT_LEVEL                        = 0x4000,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// Level Control cluster server (0x0008) - command ids.
enum {
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_MOVE_TO_LEVEL             = 0x00,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_MOVE                      = 0x01,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_STEP                      = 0x02,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_STOP                      = 0x03,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_MOVE_TO_LEVEL_WITH_ON_OFF = 0x04,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_MOVE_WITH_ON_OFF          = 0x05,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_STEP_WITH_ON_OFF          = 0x06,
  EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_STOP_WITH_ON_OFF          = 0x07,
};

// Level Control cluster server (0x0008) - MoveToLevel (0x00) command.
typedef struct {
  int8u level;
  int16u transitionTime;
} EmberZclClusterLevelControlServerCommandMoveToLevelRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterLevelControlServerCommandMoveToLevelResponse_t;
EmberStatus emberZclSendClusterLevelControlServerCommandMoveToLevelResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterLevelControlServerCommandMoveToLevelResponse_t *response);

// Level Control cluster server (0x0008) - Move (0x01) command.
typedef struct {
  int8u moveMode;
  int8u rate;
} EmberZclClusterLevelControlServerCommandMoveRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterLevelControlServerCommandMoveResponse_t;
EmberStatus emberZclSendClusterLevelControlServerCommandMoveResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterLevelControlServerCommandMoveResponse_t *response);

// Level Control cluster server (0x0008) - Step (0x02) command.
typedef struct {
  int8u stepMode;
  int8u stepSize;
  int16u transitionTime;
} EmberZclClusterLevelControlServerCommandStepRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterLevelControlServerCommandStepResponse_t;
EmberStatus emberZclSendClusterLevelControlServerCommandStepResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterLevelControlServerCommandStepResponse_t *response);

// Level Control cluster server (0x0008) - Stop (0x03) command.
typedef struct {
  bool dummy;
} EmberZclClusterLevelControlServerCommandStopRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterLevelControlServerCommandStopResponse_t;
EmberStatus emberZclSendClusterLevelControlServerCommandStopResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterLevelControlServerCommandStopResponse_t *response);

// Level Control cluster server (0x0008) - MoveToLevelWithOnOff (0x04) command.
typedef struct {
  int8u level;
  int16u transitionTime;
} EmberZclClusterLevelControlServerCommandMoveToLevelWithOnOffRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterLevelControlServerCommandMoveToLevelWithOnOffResponse_t;
EmberStatus emberZclSendClusterLevelControlServerCommandMoveToLevelWithOnOffResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterLevelControlServerCommandMoveToLevelWithOnOffResponse_t *response);

// Level Control cluster server (0x0008) - MoveWithOnOff (0x05) command.
typedef struct {
  int8u moveMode;
  int8u rate;
} EmberZclClusterLevelControlServerCommandMoveWithOnOffRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterLevelControlServerCommandMoveWithOnOffResponse_t;
EmberStatus emberZclSendClusterLevelControlServerCommandMoveWithOnOffResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterLevelControlServerCommandMoveWithOnOffResponse_t *response);

// Level Control cluster server (0x0008) - StepWithOnOff (0x06) command.
typedef struct {
  int8u stepMode;
  int8u stepSize;
  int16u transitionTime;
} EmberZclClusterLevelControlServerCommandStepWithOnOffRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterLevelControlServerCommandStepWithOnOffResponse_t;
EmberStatus emberZclSendClusterLevelControlServerCommandStepWithOnOffResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterLevelControlServerCommandStepWithOnOffResponse_t *response);

// Level Control cluster server (0x0008) - StopWithOnOff (0x07) command.
typedef struct {
  bool dummy;
} EmberZclClusterLevelControlServerCommandStopWithOnOffRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterLevelControlServerCommandStopWithOnOffResponse_t;
EmberStatus emberZclSendClusterLevelControlServerCommandStopWithOnOffResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterLevelControlServerCommandStopWithOnOffResponse_t *response);

// -----------------------------------------------------------------------------
// Over the Air Bootloading cluster (0x2000).

// Over the Air Bootloading cluster client (0x2000).
extern const EmberZclClusterSpec_t emberZclClusterOtaBootloadClientSpec;

// Over the Air Bootloading cluster client (0x2000) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_UPGRADE_SERVER_ID                            = 0x0000,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_FILE_OFFSET                                  = 0x0001,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_CURRENT_FILE_VERSION                         = 0x0002,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_CURRENT_ZIGBEE_STACK_VERSION                 = 0x0003,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_DOWNLOADED_FILE_VERSION                      = 0x0004,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_DOWNLOADED_ZIGBEE_STACK_VERSION              = 0x0005,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_IMAGE_UPGRADE_STATUS                         = 0x0006,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_MANUFACTURER_ID                              = 0x0007,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_IMAGE_TYPE_ID                                = 0x0008,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_MINIMUM_BLOCK_REQUEST_PERIOD                 = 0x0009,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_IMAGE_STAMP                                  = 0x000A,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_UPGRADE_ACTIVATION_POLICY                    = 0x000B,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_UPGRADE_TIMEOUT_POLICY                       = 0x000C,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_OTA_BOOTLOAD_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_OTA_BOOTLOAD_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// Over the Air Bootloading cluster client (0x2000) - command ids.
enum {
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_COMMAND_IMAGE_NOTIFY = 0x00,
};

// Over the Air Bootloading cluster client (0x2000) - ImageNotify (0x00) command.
typedef struct {
  int8u payloadType;
  int8u queryJitter;
  int16u manufacturerId;
  int16u imageType;
  int32u newFileVersion;
} EmberZclClusterOtaBootloadClientCommandImageNotifyRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterOtaBootloadClientCommandImageNotifyResponse_t;
EmberStatus emberZclSendClusterOtaBootloadClientCommandImageNotifyResponse(
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOtaBootloadClientCommandImageNotifyResponse_t *response);

// Over the Air Bootloading cluster server (0x2000).
extern const EmberZclClusterSpec_t emberZclClusterOtaBootloadServerSpec;

// Over the Air Bootloading cluster server (0x2000) - attribute ids.
enum {
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_SERVER_ATTRIBUTE_OTA_BOOTLOAD_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_SERVER_ATTRIBUTE_OTA_BOOTLOAD_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// Over the Air Bootloading cluster server (0x2000) - command ids.
enum {
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_SERVER_COMMAND_QUERY_NEXT_IMAGE_REQUEST    = 0x01,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_SERVER_COMMAND_IMAGE_BLOCK_REQUEST         = 0x03,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_SERVER_COMMAND_IMAGE_PAGE_REQUEST          = 0x04,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_SERVER_COMMAND_UPGRADE_END_REQUEST         = 0x06,
  EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_SERVER_COMMAND_QUERY_SPECIFIC_FILE_REQUEST = 0x08,
};

// Over the Air Bootloading cluster server (0x2000) - QueryNextImageRequest (0x01) command.
typedef struct {
  int8u fieldControl;
  int16u manufacturerId;
  int16u imageType;
  int32u currentFileVersion;
  int16u hardwareVersion;
} EmberZclClusterOtaBootloadServerCommandQueryNextImageRequest_t;
typedef struct {
  int8u status;
  int32u fileVersion;
  int32u imageSize;
  EmberZclStringType_t fileUri;
} EmberZclClusterOtaBootloadServerCommandQueryNextImageResponse_t;
typedef void (*EmberZclClusterOtaBootloadServerCommandQueryNextImageResponseHandler)(
  EmberZclMessageStatus_t status,
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOtaBootloadServerCommandQueryNextImageResponse_t *response);
EmberStatus emberZclSendClusterOtaBootloadServerCommandQueryNextImageRequest(
  const EmberZclDestination_t *destination,
  const EmberZclClusterOtaBootloadServerCommandQueryNextImageRequest_t *request,
  const EmberZclClusterOtaBootloadServerCommandQueryNextImageResponseHandler handler);

// Over the Air Bootloading cluster server (0x2000) - ImageBlockRequest (0x03) command.
typedef struct {
  int8u fieldControl;
  int16u manufacturerId;
  int16u imageType;
  int32u fileVersion;
  int32u fileOffset;
  int8u maxDataSize;
  EmberZclStringType_t requestNodeAddress;
} EmberZclClusterOtaBootloadServerCommandImageBlockRequest_t;
typedef struct {
  int8u status;
  int16u manufacturerId;
  int16u imageType;
  int32u fileVersion;
  int32u fileOffset;
  int8u dataSize;
  EmberZclStringType_t imageData;
} EmberZclClusterOtaBootloadServerCommandImageBlockResponse_t;
typedef void (*EmberZclClusterOtaBootloadServerCommandImageBlockResponseHandler)(
  EmberZclMessageStatus_t status,
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOtaBootloadServerCommandImageBlockResponse_t *response);
EmberStatus emberZclSendClusterOtaBootloadServerCommandImageBlockRequest(
  const EmberZclDestination_t *destination,
  const EmberZclClusterOtaBootloadServerCommandImageBlockRequest_t *request,
  const EmberZclClusterOtaBootloadServerCommandImageBlockResponseHandler handler);

// Over the Air Bootloading cluster server (0x2000) - ImagePageRequest (0x04) command.
typedef struct {
  int8u fieldControl;
  int16u manufacturerId;
  int16u imageType;
  int32u fileVersion;
  int32u fileOffset;
  int8u maxDataSize;
  int16u pageSize;
  int16u responseSpacing;
  EmberZclStringType_t requestNodeAddress;
} EmberZclClusterOtaBootloadServerCommandImagePageRequest_t;
typedef struct {
  enum8_t status;
} EmberZclClusterOtaBootloadServerCommandImagePageResponse_t;
typedef void (*EmberZclClusterOtaBootloadServerCommandImagePageResponseHandler)(
  EmberZclMessageStatus_t status,
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOtaBootloadServerCommandImagePageResponse_t *response);
EmberStatus emberZclSendClusterOtaBootloadServerCommandImagePageRequest(
  const EmberZclDestination_t *destination,
  const EmberZclClusterOtaBootloadServerCommandImagePageRequest_t *request,
  const EmberZclClusterOtaBootloadServerCommandImagePageResponseHandler handler);

// Over the Air Bootloading cluster server (0x2000) - UpgradeEndRequest (0x06) command.
typedef struct {
  int8u status;
  int16u manufacturerId;
  int16u imageType;
  int32u fileVersion;
} EmberZclClusterOtaBootloadServerCommandUpgradeEndRequest_t;
typedef struct {
  int16u manufacturerId;
  int16u imageType;
  int32u fileVersion;
  int32u currentTime;
  int32u upgradeTime;
} EmberZclClusterOtaBootloadServerCommandUpgradeEndResponse_t;
typedef void (*EmberZclClusterOtaBootloadServerCommandUpgradeEndResponseHandler)(
  EmberZclMessageStatus_t status,
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOtaBootloadServerCommandUpgradeEndResponse_t *response);
EmberStatus emberZclSendClusterOtaBootloadServerCommandUpgradeEndRequest(
  const EmberZclDestination_t *destination,
  const EmberZclClusterOtaBootloadServerCommandUpgradeEndRequest_t *request,
  const EmberZclClusterOtaBootloadServerCommandUpgradeEndResponseHandler handler);

// Over the Air Bootloading cluster server (0x2000) - QuerySpecificFileRequest (0x08) command.
typedef struct {
  EmberZclStringType_t requestNodeAddress;
  int16u manufacturerId;
  int16u imageType;
  int32u fileVersion;
  int16u currentZigbeeStackVersion;
} EmberZclClusterOtaBootloadServerCommandQuerySpecificFileRequest_t;
typedef struct {
  int8u status;
  int32u fileVersion;
  int32u imageSize;
  EmberZclStringType_t fileUri;
} EmberZclClusterOtaBootloadServerCommandQuerySpecificFileResponse_t;
typedef void (*EmberZclClusterOtaBootloadServerCommandQuerySpecificFileResponseHandler)(
  EmberZclMessageStatus_t status,
  const EmberZclCommandContext_t *context,
  const EmberZclClusterOtaBootloadServerCommandQuerySpecificFileResponse_t *response);
EmberStatus emberZclSendClusterOtaBootloadServerCommandQuerySpecificFileRequest(
  const EmberZclDestination_t *destination,
  const EmberZclClusterOtaBootloadServerCommandQuerySpecificFileRequest_t *request,
  const EmberZclClusterOtaBootloadServerCommandQuerySpecificFileResponseHandler handler);

// -----------------------------------------------------------------------------
// Endpoints.

#define EMBER_ZCL_CLUSTER_BASIC_SERVER_COUNT 1
#define EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_COUNT 1
#define EMBER_ZCL_CLUSTER_GROUPS_SERVER_COUNT 1
#define EMBER_ZCL_CLUSTER_SCENES_SERVER_COUNT 1
#define EMBER_ZCL_CLUSTER_ON_OFF_SERVER_COUNT 1
#define EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COUNT 1
#define EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_COUNT 1

// -----------------------------------------------------------------------------
// Attributes.

#define EM_ZCL_ATTRIBUTE_DATA_SIZE 73
#define EM_ZCL_ATTRIBUTE_COUNT 36
#define EMBER_ZCL_ATTRIBUTE_MAX_SIZE 33
#define EM_ZCL_MAX_SIZE_NV_REPORTABLE_ATTRIBUTES 1
#define EM_ZCL_MAX_SIZE_NV_REPORTABLE_CHANGES 1
#define EM_ZCL_ENDPOINT_CLUSTERS_WITH_REPORTABLE_ATTRIBUTES 2

#if BIGENDIAN_CPU
  #define EM_ZCL_ATTRIBUTE_DEFAULTS { \
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_UPGRADE_SERVER_ID */ \
    0xFF, 0xFF, 0xFF, 0xFF, /* EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_FILE_OFFSET */ \
    0x00, /* EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_IMAGE_UPGRADE_STATUS */ \
    0x00, 0x01, /* EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_OTA_BOOTLOAD_CLUSTER_CLUSTER_REVISION_CLIENT */ \
    0x03, /* EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_VERSION */ \
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_MANUFACTURER_NAME */ \
    0x00, /* EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_POWER_SOURCE */ \
    0x00, 0x01, /* EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_BASIC_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, 0x00, /* EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_TIME */ \
    0x00, 0x01, /* EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, /* EMBER_ZCL_CLUSTER_GROUPS_SERVER_ATTRIBUTE_GROUP_NAME_SUPPORT */ \
    0x00, 0x01, /* EMBER_ZCL_CLUSTER_GROUPS_SERVER_ATTRIBUTE_GROUPS_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENE_COUNT */ \
    0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_CURRENT_SCENE */ \
    0x00, 0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_CURRENT_GROUP */ \
    0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENE_VALID */ \
    0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENE_NAME_SUPPORT */ \
    0x00, 0x01, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENES_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, /* EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF */ \
    0x00, 0x01, /* EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, /* EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_CURRENT_LEVEL */ \
    0x00, 0x01, /* EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_SERVER */ \
  }
#else
  #define EM_ZCL_ATTRIBUTE_DEFAULTS { \
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_UPGRADE_SERVER_ID */ \
    0xFF, 0xFF, 0xFF, 0xFF, /* EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_FILE_OFFSET */ \
    0x00, /* EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_IMAGE_UPGRADE_STATUS */ \
    0x01, 0x00, /* EMBER_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_ATTRIBUTE_OTA_BOOTLOAD_CLUSTER_CLUSTER_REVISION_CLIENT */ \
    0x03, /* EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_VERSION */ \
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_MANUFACTURER_NAME */ \
    0x00, /* EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_POWER_SOURCE */ \
    0x01, 0x00, /* EMBER_ZCL_CLUSTER_BASIC_SERVER_ATTRIBUTE_BASIC_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, 0x00, /* EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_TIME */ \
    0x01, 0x00, /* EMBER_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, /* EMBER_ZCL_CLUSTER_GROUPS_SERVER_ATTRIBUTE_GROUP_NAME_SUPPORT */ \
    0x01, 0x00, /* EMBER_ZCL_CLUSTER_GROUPS_SERVER_ATTRIBUTE_GROUPS_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENE_COUNT */ \
    0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_CURRENT_SCENE */ \
    0x00, 0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_CURRENT_GROUP */ \
    0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENE_VALID */ \
    0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENE_NAME_SUPPORT */ \
    0x01, 0x00, /* EMBER_ZCL_CLUSTER_SCENES_SERVER_ATTRIBUTE_SCENES_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, /* EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF */ \
    0x01, 0x00, /* EMBER_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF_CLUSTER_CLUSTER_REVISION_SERVER */ \
    0x00, /* EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_CURRENT_LEVEL */ \
    0x01, 0x00, /* EMBER_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_SERVER */ \
  }
#endif

#endif // SILABS_ZCL_DEVICE_H
